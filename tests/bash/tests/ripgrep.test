#!/usr/bin/env bash

# shellcheck disable=SC1091
source "${HOME}/.bash_topics.d/required_functions.sh.inc"

function setUp() {
    unset CDPATH
    # shellcheck disable=SC1091
    source "${HOME}/.bash_topics.d/ripgrep.bash"
    cd "${DOTFILES_DIR}/tests/bash/test-data" || return 1
}

function test_ge_basic_functionality() {
    # finds text and opens the editor
    # finds text in a file within a hidden directory
    # finds text in multiple files

    # shellcheck disable=SC2034
    local EDITOR=echo
    local OUTPUT
    OUTPUT="$(ge --sort=path 'string for rg to find')"
    assertEquals "files weren't opened!" ".hidden_data/test_ge_2.data data/test_ge_1.data" "${OUTPUT}"
}

function test_ge_ignores_file() {
    # won't find text in a file ignored by git

    # shellcheck disable=SC2034
    local EDITOR=echo
    local OUTPUT
    cd "${DOTFILES_DIR}" || return
    OUTPUT="$(ge 'Unnamed repository')"
    assertEquals "did not ignore .git!" "tests/bash/tests/ripgrep.test" "${OUTPUT}"
}

function test_ge_follows_symbolic_links() {
    # follows a symbolic link to a directory and finds text in a file within that directory

    # shellcheck disable=SC2034
    local EDITOR=echo
    local OUTPUT
    local RANDOM_STRING

    [ "$(get_platform.py)" = "mingw" ] && startSkipping

    # make a link in /tmp that leads to test/data
    RANDOM_STRING="$(python3 -c "import uuid; print(str(uuid.uuid4()),end='')")"
    OUTER_DIRECTORY="/tmp/${RANDOM_STRING}"
    mkdir "${OUTER_DIRECTORY}"

    ln -s "${DOTFILES_DIR}/tests/bash/test-data/data" "${OUTER_DIRECTORY}/data"

    # search /tmp for a file in test/data
    OUTPUT="$(ge 'string for rg to find' "${OUTER_DIRECTORY}")"

    # shellcheck disable=SC2016
    assertTrue "didn't find anything at all!" '[ "${OUTPUT}" ]'
    assertEquals "didn't find the right file!" "${OUTER_DIRECTORY}/data/test_ge_1.data" "${OUTPUT}"

    # remove the stuff we made in /tmp
    rm -rf "${OUTER_DIRECTORY}"
}

function test_ge_opens_hidden_files() {
    # finds text in a hidden file

    # shellcheck disable=SC2034
    local EDITOR=echo
    local OUTPUT
    OUTPUT="$(ge 'string that was hidden for rg to find')"
    assertEquals "files weren't opened!" "data/.test_ge_opens_hidden_files.data" "${OUTPUT}"
}

function test_ge_works_on_paths_that_need_quoting() {
    local OUTPUT
    # shellcheck disable=SC2209
    OUTPUT="$(EDITOR=echo ge 'string on a path that requires quoting for rg to find')"
    assertEquals "didn't find a string on a path that requires quoting" "quoting needed/test.data" "${OUTPUT}"
}

function test_ge_fails_silently() {
    # fails silently

    # shellcheck disable=SC2209
    EDITOR=echo ge "a string that won't be found" >/dev/null
    assertTrue "didn't fail silently!" "[ $? ]"
}

function test_ge_finds_unignored_file() {
    # will search a hidden file white-listed by .gitignore even with --no-hidden

    # shellcheck disable=SC2034
    local EDITOR=echo
    local OUTPUT
    OUTPUT="$(ge --no-hidden 'string that was unignored for rg to find')"
    assertEquals "files weren't opened!" "data/.unignored_file.data" "${OUTPUT}"
}

function test_ge_finds_multiple_patterns_in_one_call() {
    # finds two different files each containing a different match as specified with -e <pattern>
    local OUTPUT

    # shellcheck disable=SC2209
    OUTPUT="$(EDITOR=echo ge --sort=path -e unignored -e hidden)"

    # shellcheck disable=SC2016
    assertTrue "didn't find anything at all!" '[ "${OUTPUT}" ]'
    assertEquals "didn't find the right files!" "data/.gitignore data/.test_ge_opens_hidden_files.data data/.unignored_file.data" "${OUTPUT}"
}

# shellcheck disable=SC1090
source "$(which shunit2)"
