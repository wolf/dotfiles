#!/usr/bin/env bash

function oneTimeSetUp() {
    git clone https://github.com/wolf/dotfiles.git /tmp/dotfiles-unittest-working-copy >/dev/null 2>&1
    git -C /tmp/dotfiles-unittest-working-copy reset --hard 283217a05797dc2c2eefc31d2ca9a6db70b74665 >/dev/null
}

function oneTimeTearDown() {
    cd "${HOME}" || return
    rm -rf /tmp/dotfiles-unittest-working-copy
}

function setUp() {
    unset CDPATH
    # shellcheck disable=SC1091
    source "${HOME}/.bash_topics.d/git.bash"
    cd /tmp/dotfiles-unittest-working-copy || return 1
}

function test_tip_basic_functionality() {
    local EXPECTED_OUTPUT='283217a'
    local OTHER_EXPECTED_OUTPUT='420b20e'
    local ACTUAL_OUTPUT

    ACTUAL_OUTPUT="$(tip)"
    assertEquals "tip with no arguments didn't find the expected commit" "${EXPECTED_OUTPUT}" "${ACTUAL_OUTPUT}"

    ACTUAL_OUTPUT="$(tip HEAD)"
    assertEquals "tip of HEAD didn't find the expected commit" "${EXPECTED_OUTPUT}" "${ACTUAL_OUTPUT}"

    ACTUAL_OUTPUT="$(tip main)"
    assertEquals "tip of main didn't find the expected commit" "${EXPECTED_OUTPUT}" "${ACTUAL_OUTPUT}"

    git switch -c another_branch HEAD~5 >/dev/null 2>&1

    ACTUAL_OUTPUT="$(tip)"
    assertEquals "tip on a different branch didn't find the expected commit" "${OTHER_EXPECTED_OUTPUT}" "${ACTUAL_OUTPUT}"

    git switch main >/dev/null 2>&1

    ACTUAL_OUTPUT="$(tip another_branch)"
    assertEquals "tip from main against another_branch didn't find the expected commit" "${OTHER_EXPECTED_OUTPUT}" "${ACTUAL_OUTPUT}"

    git branch -d another_branch >/dev/null 2>&1
}

function test_cdtop_basic_functionality() {
    local EXPECTED_WORKING_COPY_ROOT="/tmp/dotfiles-unittest-working-copy"
    local STARTING_DIRECTORY="/tmp/dotfiles-unittest-working-copy/ipython/.ipython/profile_default/startup"
    local ACTUAL_ENDING_DIRECTORY

    cd "${STARTING_DIRECTORY}" || return 1
    assertTrue "the starting directory might be a root!" '[ ! -d .git ]'

    cdtop
    ACTUAL_ENDING_DIRECTORY="$(pwd)"
    ACTUAL_ENDING_DIRECTORY="${ACTUAL_ENDING_DIRECTORY#/private}"

    assertNotEquals "cdtop didn't change directories!" "${STARTING_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
    assertEquals "cdtop didn't find the expected working copy root" "${EXPECTED_WORKING_COPY_ROOT}" "${ACTUAL_ENDING_DIRECTORY}"
}

function test_cdtop_works_on_paths_that_need_quoting() {
    mv /tmp/dotfiles-unittest-working-copy "/tmp/dotfiles needs quoting"

    local EXPECTED_WORKING_COPY_ROOT="/tmp/dotfiles needs quoting"
    local STARTING_DIRECTORY="/tmp/dotfiles needs quoting/ipython/.ipython/profile_default/startup"
    local ACTUAL_ENDING_DIRECTORY

    cd "${STARTING_DIRECTORY}" || return 1
    assertTrue "the starting directory might be a root!" '[ ! -d .git ]'

    cdtop
    ACTUAL_ENDING_DIRECTORY="$(pwd)"
    ACTUAL_ENDING_DIRECTORY="${ACTUAL_ENDING_DIRECTORY#/private}"

    assertNotEquals "cdtop didn't change directories!" "${STARTING_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
    assertEquals "cdtop didn't find the expected working copy root" "${EXPECTED_WORKING_COPY_ROOT}" "${ACTUAL_ENDING_DIRECTORY}"

    mv "/tmp/dotfiles needs quoting" /tmp/dotfiles-unittest-working-copy
}

function test_cdtop_follows_relative_path_down_from_the_top() {
    local WORKING_COPY_ROOT="/tmp/dotfiles-unittest-working-copy"
    local STARTING_DIRECTORY="${WORKING_COPY_ROOT}/ipython/.ipython/profile_default/startup"
    local EXPECTED_ENDING_DIRECTORY="${WORKING_COPY_ROOT}/neovim/.config/nvim"
    local ACTUAL_ENDING_DIRECTORY

    cd "${STARTING_DIRECTORY}" || return 1
    assertTrue "the starting directory might be a root!" '[ ! -d .git ]'

    cdtop "neovim/.config/nvim"
    ACTUAL_ENDING_DIRECTORY="$(pwd)"
    ACTUAL_ENDING_DIRECTORY="${ACTUAL_ENDING_DIRECTORY#/private}"

    assertNotEquals "cdtop didn't change directories!" "${STARTING_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
    assertEquals "cdtop didn't find the expected relative path from the working copy root" "${EXPECTED_ENDING_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
}

function test_cdtop_works_on_relative_paths_that_need_quoting() {
    mv /tmp/dotfiles-unittest-working-copy/neovim "/tmp/dotfiles-unittest-working-copy/neo vim"
    mv /tmp/dotfiles-unittest-working-copy "/tmp/dotfiles needs quoting"

    local WORKING_COPY_ROOT="/tmp/dotfiles needs quoting"
    local STARTING_DIRECTORY="${WORKING_COPY_ROOT}/ipython/.ipython/profile_default/startup"
    local EXPECTED_ENDING_DIRECTORY="${WORKING_COPY_ROOT}/neo vim/.config/nvim"
    local ACTUAL_ENDING_DIRECTORY

    cd "${STARTING_DIRECTORY}" || return 1
    assertTrue "the starting directory might be a root!" '[ ! -d .git ]'

    cdtop "neo vim/.config/nvim"
    ACTUAL_ENDING_DIRECTORY="$(pwd)"
    ACTUAL_ENDING_DIRECTORY="${ACTUAL_ENDING_DIRECTORY#/private}"

    assertNotEquals "cdtop didn't change directories!" "${STARTING_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
    assertEquals "cdtop didn't find the expected relative path from the working copy root" "${EXPECTED_ENDING_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"

    mv "/tmp/dotfiles needs quoting" /tmp/dotfiles-unittest-working-copy
    mv "/tmp/dotfiles-unittest-working-copy/neo vim" /tmp/dotfiles-unittest-working-copy/neovim
}

function test_cdtop_works_within_dot_git_directory() {
    local EXPECTED_WORKING_COPY_ROOT="/tmp/dotfiles-unittest-working-copy"
    local STARTING_DIRECTORY="/tmp/dotfiles-unittest-working-copy/.git/refs/heads"
    local ACTUAL_ENDING_DIRECTORY

    cd "${STARTING_DIRECTORY}" || return 1
    assertTrue "the starting directory might be a root!" '[ ! -d .git ]'

    cdtop
    ACTUAL_ENDING_DIRECTORY="$(pwd)"
    ACTUAL_ENDING_DIRECTORY="${ACTUAL_ENDING_DIRECTORY#/private}"

    assertNotEquals "cdtop didn't change directories!" "${STARTING_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
    assertEquals "cdtop didn't find the expected working copy root" "${EXPECTED_WORKING_COPY_ROOT}" "${ACTUAL_ENDING_DIRECTORY}"
}

function test_pushdtop_basic_functionality() {
    local WORKING_COPY_ROOT="/tmp/dotfiles-unittest-working-copy"
    local STARTING_DIRECTORY="${WORKING_COPY_ROOT}/ipython/.ipython/profile_default/startup"
    local EXPECTED_MIDDLE_DIRECTORY="${WORKING_COPY_ROOT}/neovim/.config/nvim"
    local ACTUAL_ENDING_DIRECTORY
    local ACTUAL_MIDDLE_DIRECTORY

    cd "${STARTING_DIRECTORY}" || return 1
    assertTrue "the starting directory might be a root!" '[ ! -d .git ]'

    pushdtop "neovim/.config/nvim" >/dev/null
    ACTUAL_MIDDLE_DIRECTORY="$(pwd)"
    ACTUAL_MIDDLE_DIRECTORY="${ACTUAL_MIDDLE_DIRECTORY#/private}"

    assertNotEquals "pushdtop didn't change directories!" "${STARTING_DIRECTORY}" "${ACTUAL_MIDDLE_DIRECTORY}"
    assertEquals "pushdtop didn't find the expected relative path from the working copy root" "${EXPECTED_MIDDLE_DIRECTORY}" "${ACTUAL_MIDDLE_DIRECTORY}"

    popd >/dev/null || return 1
    ACTUAL_ENDING_DIRECTORY="$(pwd)"
    ACTUAL_ENDING_DIRECTORY="${ACTUAL_ENDING_DIRECTORY#/private}"

    assertNotEquals "popd didn't change directories!" "${ACTUAL_MIDDLE_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
    assertEquals "popd didn't return to the pushed directory" "${STARTING_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
}

function test_pushdtop_works_on_paths_that_need_quoting() {
    mv /tmp/dotfiles-unittest-working-copy/neovim "/tmp/dotfiles-unittest-working-copy/neo vim"
    mv /tmp/dotfiles-unittest-working-copy "/tmp/dotfiles needs quoting"

    local WORKING_COPY_ROOT="/tmp/dotfiles needs quoting"
    local STARTING_DIRECTORY="${WORKING_COPY_ROOT}/ipython/.ipython/profile_default/startup"
    local EXPECTED_MIDDLE_DIRECTORY="${WORKING_COPY_ROOT}/neo vim/.config/nvim"
    local ACTUAL_ENDING_DIRECTORY
    local ACTUAL_MIDDLE_DIRECTORY

    cd "${STARTING_DIRECTORY}" || return 1
    assertTrue "the starting directory might be a root!" '[ ! -d .git ]'

    pushdtop "neo vim/.config/nvim" >/dev/null
    ACTUAL_MIDDLE_DIRECTORY="$(pwd)"
    ACTUAL_MIDDLE_DIRECTORY="${ACTUAL_MIDDLE_DIRECTORY#/private}"

    assertNotEquals "pushdtop didn't change directories!" "${STARTING_DIRECTORY}" "${ACTUAL_MIDDLE_DIRECTORY}"
    assertEquals "pushdtop didn't find the expected relative path from the working copy root" "${EXPECTED_MIDDLE_DIRECTORY}" "${ACTUAL_MIDDLE_DIRECTORY}"

    popd >/dev/null || return 1
    ACTUAL_ENDING_DIRECTORY="$(pwd)"
    ACTUAL_ENDING_DIRECTORY="${ACTUAL_ENDING_DIRECTORY#/private}"

    assertNotEquals "popd didn't change directories!" "${ACTUAL_MIDDLE_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
    assertEquals "popd didn't return to the pushed directory" "${STARTING_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"

    mv "/tmp/dotfiles needs quoting" /tmp/dotfiles-unittest-working-copy
    mv "/tmp/dotfiles-unittest-working-copy/neo vim" /tmp/dotfiles-unittest-working-copy/neovim
}

function test_pushdtop_works_within_the_dot_git_directory() {
    local WORKING_COPY_ROOT="/tmp/dotfiles-unittest-working-copy"
    local STARTING_DIRECTORY="${WORKING_COPY_ROOT}/.git/refs/heads"
    local EXPECTED_MIDDLE_DIRECTORY="${WORKING_COPY_ROOT}/.git/hooks"
    local ACTUAL_ENDING_DIRECTORY
    local ACTUAL_MIDDLE_DIRECTORY

    cd "${STARTING_DIRECTORY}" || return 1
    assertTrue "the starting directory might be a root!" '[ ! -d .git ]'

    pushdtop ".git/hooks" >/dev/null
    ACTUAL_MIDDLE_DIRECTORY="$(pwd)"
    ACTUAL_MIDDLE_DIRECTORY="${ACTUAL_MIDDLE_DIRECTORY#/private}"

    assertNotEquals "pushdtop didn't change directories!" "${STARTING_DIRECTORY}" "${ACTUAL_MIDDLE_DIRECTORY}"
    assertEquals "pushdtop didn't find the expected relative path from the working copy root" "${EXPECTED_MIDDLE_DIRECTORY}" "${ACTUAL_MIDDLE_DIRECTORY}"

    popd >/dev/null || return 1
    ACTUAL_ENDING_DIRECTORY="$(pwd)"
    ACTUAL_ENDING_DIRECTORY="${ACTUAL_ENDING_DIRECTORY#/private}"

    assertNotEquals "popd didn't change directories!" "${ACTUAL_MIDDLE_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
    assertEquals "popd didn't return to the pushed directory" "${STARTING_DIRECTORY}" "${ACTUAL_ENDING_DIRECTORY}"
}

function test_dirty() {
    git reset --mixed HEAD~1 >/dev/null

    local GOLDEN_RECORD="bash/.bash_topics.d/fd.bash"$'\n'"bash/.bashrc"
    local OUTPUT

    OUTPUT="$(dirty)"

    assertEquals "didn't find the right files" "${GOLDEN_RECORD}" "${OUTPUT}"

    git reset --hard 283217a05797dc2c2eefc31d2ca9a6db70b74665 >/dev/null
}

# edit_dirty
# zadd?
# zshow?

# shellcheck disable=SC1090
source "$(which shunit2)"
