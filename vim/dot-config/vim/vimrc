set encoding=utf-8
set fileencoding=utf-8

set nocompatible    " this is Vim, not vi, so act like it

" Set <Leader> before anything references it
let mapleader = "\<Space>"
let maplocalleader = "\\"

" Plugins {{{
filetype off

call plug#begin('~/.config/vim/plugged')

" Basics {{{
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-unimpaired'

Plug 'vim-scripts/ReplaceWithRegister'
" }}}

" Navigation {{{
" Within a file...
Plug 'haya14busa/incsearch.vim'
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

Plug 'wellle/targets.vim'
if has('nvim')
    " I rely heavily on easymotion.  That doesn't work in NeoVim.  Use hop
    " instead.
    Plug 'smoka7/hop.nvim'
else
    Plug 'justinmk/vim-sneak'
    Plug 'easymotion/vim-easymotion'
    Plug 'haya14busa/incsearch-easymotion.vim'
    map z/ <Plug>(incsearch-easymotion-/)
    map z? <Plug>(incsearch-easymotion-?)
    map zg/ <Plug>(incsearch-easymotion-stay)
endif

" Between files...
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
let g:fzf_history_dir = '~/.config/vim/fzf_history/'
let g:fzf_buffers_jump = 1
let g:fzf_tags_command = "ctags -R --exclude='.git' --exclude='.mypy_cache' --exclude='__pycache__' --exclude='node_modules' --exclude='*venv'"
" }}}

" Experimental {{{
" ...that is, plugins I don't know that I will keep
Plug 'awvalenti/vim-simple-guifont'

Plug 'michaeljsmith/vim-indent-object'


" let g:ale_disable_lsp = 1
Plug 'dense-analysis/ale'
let g:ale_linters = {
\    'python': ['ruff']
\}
let g:ale_linters_explicit = 1
let g:ale_fixers = {}
let g:ale_fixers.python = ['ruff']

Plug 'nelstrom/vim-visual-star-search'
" }}}

" Temporary {{{
" ...not experimental because I know I will be ditching these when I'm done
" }}}

" Visual effects {{{
set background=light
set termguicolors

if !has('nvim')
    Plug 'machakann/vim-highlightedyank'
    let g:highlightedyank_highlight_duration = 450
    " Note: highlight color must be setup _after_ colorscheme.
endif

Plug 'NLKNguyen/papercolor-theme'
Plug 'kjssad/quantum.vim'

" Airline {{{
Plug 'vim-airline/vim-airline'
let g:airline#extensions#branch#format = 1
let g:airline#extensions#branch#vcs_checks = ['untracked', 'dirty']
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#wordcount#enabled = 0

Plug 'vim-airline/vim-airline-themes'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''

let g:airline_theme='papercolor'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
" }}}
" }}}

" Language support {{{
if has('nvim')
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'simrat39/rust-tools.nvim'
    Plug 'neovim/nvim-lspconfig'

    Plug 'python-mode/python-mode'
    let g:pymode_options_max_line_length = 120
    let g:pymode_lint_options_pep8 = {'max_line_length': g:pymode_options_max_line_length}
    let g:pymode_options_colorcolumn = 1
endif

Plug 'tpope/vim-endwise'
Plug 'tweekmonster/braceless.vim'
let g:braceless_line_continuation = 0
" }}}

call plug#end()   " required
" }}}

" Terminal and colorscheme properties {{{
" See https://stackoverflow.com/a/44102038/908269
function! GetColorSchemes()
    return uniq(sort(map(
    \   globpath(&runtimepath, "colors/*.vim", 0, 1),
    \   'fnamemodify(v:val, ":t:r")'
    \)))
endfunction

let s:schemes = GetColorSchemes()
if has('nvim') && index(s:schemes, 'quantum') >= 0
    colorscheme quantum
elseif index(s:schemes, 'PaperColor') >= 0
    colorscheme PaperColor
else
    colorscheme peachpuff
endif

" For highlighted yank, must set up color _after_ setting the colorscheme.
highlight HighlightedyankRegion guibg=#ffea00

" if !has('nvim') && &term !~ 'builtin_gui'
"     set ttymouse=xterm2
" endif

" Set the cursor shape appropriately, see https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes
if has('mac')
    if &term !~? 'screen'
        " for iTerm
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_SR = "\<Esc>]50;CursorShape=2\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    else
        " for tmux running in iTerm
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    endif
elseif has('unix')
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
endif
" }}}

" Settings {{{
if has('nvim')
    let g:python_host_prog = '~/.config/nvim/nvim_venv/bin/python'
    let g:python3_host_prog = '~/.config/nvim/nvim_venv/bin/python'
endif

set pyxversion=3

set hidden
set showcmd
set showmode
set hlsearch
set showmatch
set autoread

set ignorecase      " searches are case-insensitive
set smartcase       " ...unless you actually include capital letters in the search string

set scrolloff=3
set cmdheight=2     " enlarge the command area to two lines
set number          " display line numbers

" statusline {{{
set statusline=%<                           " where to break
set statusline+=%f%M%R                      " leafname, modified, read-only
set statusline+=\ %{fugitive#statusline()}  " if in git repo, git info
set statusline+=%=                          " switch to the right side

set statusline+=%y                          " file type, e.g., [markdown]
set statusline+=\ %-14.(%l,%c%)             " like ruler, line, column
set statusline+=\ %P                        " percentage of file shown
" }}}

set splitright      " make splitting act more like one would expect: open new splits to the right
set splitbelow      " ...and/or below the current window

set nostartofline
set confirm
set visualbell
set mouse=a
set notimeout ttimeout ttimeoutlen=200
"set pastetoggle=<F11>
set sessionoptions+=resize,unix,slash
set shortmess-=S
set history=200

if has('nvim')
    set clipboard=unnamedplus
else
    set clipboard=unnamed
endif

set complete+=i,kspell
set cpoptions+=>
set cursorline

set shiftwidth=4
set softtabstop=4
set expandtab
" }}}

" ALE behavior {{{
" in the style of unimpaired, as per Modern Vim
nnoremap <silent> [W <Plug>(ale_first)
nnoremap <silent> [w <Plug>(ale_previous)
nnoremap <silent> ]w <Plug>(ale_next)
nnoremap <silent> ]W <Plug>(ale_last)

" }}}

" FZF behavior {{{
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>o :FZF<CR>
nnoremap <silent> <Leader>t :Tags<CR>
nnoremap <silent> <Leader>w :Windows<CR>
nnoremap <silent> <Leader>rg :Rg<CR>
" }}}

" Grepper behavior {{{
let g:grepper       = {}
let g:grepper.tools = ['rg', 'git', 'grep']

" Search for the current word
nnoremap <Leader>* :Grepper -cword -noprompt<CR>

" Search for the current selection
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" }}}

" All files {{{
augroup open_and_close
    autocmd!
    " Show the cursorline in the active window when _not_ in insert mode
    autocmd InsertLeave,WinEnter * set cursorline
    autocmd InsertEnter,WinLeave * set nocursorline

    " Use the current background color
    autocmd VimEnter * set t_ut=
    " autocmd VimEnter * silent !echo -ne "\<Esc>[2 q"

    " When opening a buffer, restore the exact cursor position if it still
    " exists
    autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END
" }}}

" Vim files {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker foldlevelstart=1 foldlevel=1
augroup END

augroup filetype_help
    autocmd!
    autocmd FileType help setlocal scrolloff=0 nonumber
augroup END
" }}}

" JSON files {{{
augroup filetype_json
    autocmd!
    autocmd FileType json setlocal foldmethod=syntax foldlevelstart=0
augroup END
" }}}

" Python files {{{
augroup filetype_python
    autocmd!
    autocmd! BufRead,BufNewFile *.ipy set filetype=python
    autocmd FileType python BracelessEnable +indent +highlight-cc2 +fold
    autocmd FileType python setlocal textwidth=120
augroup END
" }}}

" Markdown files {{{
augroup filetype_markdown
    autocmd!
    autocmd FileType markdown let b:surround_{char2nr("c")} = "-> \r <-"
    autocmd FileType markdown let b:surround_{char2nr("l")} = "[\r]()"
augroup END
" }}}

" Bash files {{{
augroup filetype_sh
    autocmd!
    autocmd! BufRead,BufNewFile *.bash.inc set filetype=sh
    autocmd FileType sh let b:surround_{char2nr("v")} = "\"${\r}\""
    autocmd FileType sh let b:surround_{char2nr("s")} = "\"$(\r)\""
    autocmd FileType sh let b:surround_{char2nr("S")} = "\"$( \r )\""
augroup END
" }}}

" The commit message in Git {{{
augroup filetype_edit_commitmessage
    autocmd!
    autocmd BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
augroup END
" }}}

" Files on Dropbox {{{
augroup filetype_on_dropbox
    autocmd!
    autocmd BufEnter ~/Dropbox/* :set noswapfile
augroup END
" }}}

" Mappings and abbreviations {{{
iabbrev ehome wolf@zv.cx
iabbrev ework wolf@dmp-maps.com

" Prepend hiding search matches (until the next search) to redrawing the screen
nnoremap <silent> <C-L> :<C-U>nohlsearch<CR><C-L>

" Edit my $MYVIMRC in a new tab, source it
nnoremap <silent> <Leader>ev :tabnew $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :source $MYVIMRC<CR>
if has('gui')
    nnoremap <silent> <Leader>eg :tabnew $MYGVIMRC<CR>
    nnoremap <silent> <Leader>sg :source $MYGVIMRC<CR>
endif

" Whitespace errors {{{
let g:show_whitespace_errors = 0
function! ToggleShowWhitespaceErrors()
    let g:show_whitespace_errors = !g:show_whitespace_errors
    if g:show_whitespace_errors
        :2match Error /\v\s+$/
    else
        :2match none
    endif
endfunction

nnoremap <silent> <Leader>sw :call ToggleShowWhitespaceErrors()<CR>
" }}}

" Toggle relative line numbers for easier motion math
nnoremap <silent> <Leader>rn :set relativenumber!<CR>
" Toggle list view
nnoremap <silent> <Leader>l :set list!<CR>
set listchars=space:·,tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+,eol:$

" Act naturally when lines wrap
nnoremap j gj
nnoremap k gk
" nnoremap ^ g^
" nnoremap 0 g0
" nnoremap $ g$
nnoremap gj j
nnoremap gk k
" nnoremap g^ ^
" nnoremap g$ $
" nnoremap g0 0

" Keep the visual selection after in|out-denting
vnoremap > >gv
vnoremap < <gv

" Double anything else applies to the whole line, why not v?
nnoremap vv V

" Convenient for copy/paste of shell commands from a script during demos.
" Maybe temporary
nnoremap Y 0y$

" }}}

" Modelines {{{
set modeline

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.  See: https://vim.fandom.com/wiki/Modeline_magic
function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set %sai :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no', &autoindent ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), "")
    call append(line("$"), l:modeline)
endfunction

nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" }}}

" Undo {{{
if has('persistent_undo')
    if has('nvim')
        set undodir=~/.config/nvim/undo/
    else
        set undodir=~/.config/vim/undo/
    endif
    set undofile
endif

" }}}


" vim: set ts=4 sw=4 tw=78 et ai :
