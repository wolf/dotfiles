set encoding=utf-8
set fileencoding=utf-8

set nocompatible    " this is Vim, not vi, so act like it

" Set <Leader> before anything references it
let mapleader = "\<Space>"
let maplocalleader = "\\"

" Plugins {{{
filetype off

call plug#begin('~/.vim/plugged')

" Basics {{{
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-capslock'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-unimpaired'
" }}}

" Navigation {{{
" Within a file...
Plug 'justinmk/vim-sneak'
Plug 'haya14busa/incsearch.vim'
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch-easymotion.vim'

" Between files...
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
let g:fzf_history_dir = '~/.vim/fzf_history/'
let g:fzf_buffers_jump = 1
let g:fzf_tags_command = "ctags -R --exclude='.git' --exclude='.mypy_cache' --exclude='__pycache__' --exclude='node_modules' --exclude='*venv'"

if !has('win32') && !has('win32unix') && (substitute(system('uname'), '\n', '', '') != 'Linux')
    " Between notes...
    Plug 'alok/notational-fzf-vim'
    let g:nv_search_paths = ['~/Vaults/Genomenon', '~/Vaults/Notes']
    let g:nv_create_note_window = 'split'
endif
" }}}

" Autocomplete and friends {{{
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'mattn/emmet-vim'
" }}}

" Experimental {{{
" ...that is, plugins I don't know that I will keep

Plug 'michaeljsmith/vim-indent-object'

Plug 'prettier/vim-prettier'

" let g:ale_disable_lsp = 1
Plug 'dense-analysis/ale'
let g:ale_linters = {
\    'python': ['flake8', 'mypy', 'pyright'],
\    'elixir': ['elixir-ls']
\}
let g:ale_linters_explicit = 1
let g:ale_fixers = {}
let g:ale_fixers.python = ['black']
let g:ale_fixers.elixir = ['mix_format']

let g:ale_elixir_elixir_ls_release = '/opt/homebrew/Cellar/elixir-ls/0.11.0/libexec'

if has('python3')
    Plug 'python-mode/python-mode'
    let g:pymode_options_max_line_length = 120
    let g:pymode_lint_options_pep8 = {'max_line_length': g:pymode_options_max_line_length}
    let g:pymode_options_colorcolumn = 1
endif

Plug 'pangloss/vim-javascript'
Plug 'HerringtonDarkholme/yats.vim'

Plug 'editorconfig/editorconfig-vim'
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

Plug 'nelstrom/vim-visual-star-search'
Plug 'wellle/targets.vim'

" To get nvim in my browser TEXTAREAs
if has('nvim')
    Plug 'glacambre/firenvim'
endif

Plug 'vim-scripts/argtextobj.vim'
" }}}

" Temporary {{{
" ...not experimental because I know I will be ditching these when I'm done
" }}}

" Visual effects {{{
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = 450

set background=light
set t_Co=256
Plug 'NLKNguyen/papercolor-theme'

" Airline {{{
Plug 'vim-airline/vim-airline'
let g:airline#extensions#branch#format = 1
let g:airline#extensions#branch#vcs_checks = ['untracked', 'dirty']
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#wordcount#enabled = 0

Plug 'vim-airline/vim-airline-themes'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''

let g:airline_theme='papercolor'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
" }}}
" }}}

" Language support {{{
Plug 'tpope/vim-endwise'
Plug 'tweekmonster/braceless.vim'
let g:braceless_line_continuation = 0

Plug 'psf/black'
let g:black_linelength = 120

Plug 'meatballs/vim-xonsh'

Plug 'elixir-editors/vim-elixir'
" }}}

call plug#end()   " required
" }}}

" Terminal and colorscheme properties {{{
" See https://stackoverflow.com/a/44102038/908269
function! GetColorSchemes()
    return uniq(sort(map(
    \   globpath(&runtimepath, "colors/*.vim", 0, 1),
    \   'fnamemodify(v:val, ":t:r")'
    \)))
endfunction

let s:schemes = GetColorSchemes()
if index(s:schemes, 'PaperColor') >= 0
    colorscheme PaperColor
else
    colorscheme peachpuff
endif

" if !has('nvim') && &term !~ 'builtin_gui'
"     set ttymouse=xterm2
" endif

" Set the cursor shape appropriately, see https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes
if has('mac')
    if &term !~? 'screen'
        " for iTerm
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_SR = "\<Esc>]50;CursorShape=2\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    else
        " for tmux running in iTerm
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    endif
endif
" }}}

" Settings {{{
if has('nvim')
    let g:python3_host_prog = '~/.pyenv/versions/nvim/bin/python'
endif

set pyxversion=3

set hidden
set showcmd
set showmode
set hlsearch
set showmatch
set autoread

set ignorecase      " searches are case-insensitive
set smartcase       " ...unless you actually include capital letters in the search string

set scrolloff=3
set cmdheight=2     " enlarge the command area to two lines
set number          " display line numbers

" statusline {{{
set statusline=%<                           " where to break
set statusline+=%f%M%R                      " leafname, modified, read-only
set statusline+=\ %{fugitive#statusline()}  " if in git repo, git info
set statusline+=%=                          " switch to the right side

set statusline+=%y                          " file type, e.g., [markdown]
set statusline+=\ %-14.(%l,%c%)             " like ruler, line, column
set statusline+=\ %P                        " percentage of file shown
" }}}

set splitright      " make splitting act more like one would expect: open new splits to the right
set splitbelow      " ...and/or below the current window

set nostartofline
set confirm
set visualbell
set mouse=a
set notimeout ttimeout ttimeoutlen=200
"set pastetoggle=<F11>
set sessionoptions+=resize,unix,slash
set shortmess-=S
set history=200

if has('nvim')
    set clipboard=unnamedplus
else
    set clipboard=unnamed
endif

set complete+=i,kspell
set cpoptions+=>
set cursorline

set shiftwidth=4
set softtabstop=4
set expandtab
" }}}

" Coc behavior {{{

" May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
" utf-8 byte sequence
set encoding=utf-8
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" }}}

" ALE behavior {{{
" in the style of unimpaired, as per Modern Vim
nnoremap <silent> [W <Plug>(ale_first)
nnoremap <silent> [w <Plug>(ale_previous)
nnoremap <silent> ]w <Plug>(ale_next)
nnoremap <silent> ]W <Plug>(ale_last)

" }}}

" FZF behavior {{{
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>o :FZF<CR>
nnoremap <silent> <Leader>t :Tags<CR>
nnoremap <silent> <Leader>w :Windows<CR>
nnoremap <silent> <Leader>rg :Rg<CR>

nnoremap <silent> <Leader>nv :NV<CR>
" }}}

" Grepper behavior {{{
let g:grepper       = {}
let g:grepper.tools = ['grep', 'git', 'rg']

" Search for the current word
nnoremap <Leader>* :Grepper -cword -noprompt<CR>

" Search for the current selection
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" }}}

" All files {{{
augroup open_and_close
    autocmd!
    " Show the cursorline in the active window when _not_ in insert mode
    autocmd InsertLeave,WinEnter * set cursorline
    autocmd InsertEnter,WinLeave * set nocursorline

    " Use the current background color
    autocmd VimEnter * set t_ut=

    " When opening a buffer, restore the exact cursor position if it still
    " exists
    autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END
" }}}

" Vim files {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker foldlevelstart=0
augroup END

augroup filetype_help
    autocmd!
    autocmd FileType help setlocal scrolloff=0 nonumber
augroup END
" }}}

" JSON files {{{
augroup filetype_json
    autocmd!
    autocmd FileType json setlocal foldmethod=syntax foldlevelstart=0
augroup END
" }}}

" Python files {{{
augroup filetype_python
    autocmd!
    autocmd! BufRead,BufNewFile *.ipy set filetype=python
    autocmd FileType python BracelessEnable +indent +highlight-cc2 +fold
augroup END
" }}}

" Markdown files {{{
augroup filetype_markdown
    autocmd!
    autocmd FileType markdown let b:surround_{char2nr("c")} = "-> \r <-"
    autocmd FileType markdown let b:surround_{char2nr("l")} = "[\r]()"
augroup END
" }}}

" Bash files {{{
augroup filetype_sh
    autocmd!
    autocmd! BufRead,BufNewFile *.bash.inc set filetype=sh
    autocmd FileType sh let b:surround_{char2nr("v")} = "\"${\r}\""
    autocmd FileType sh let b:surround_{char2nr("s")} = "\"$(\r)\""
    autocmd FileType sh let b:surround_{char2nr("S")} = "\"$( \r )\""
augroup END
" }}}

" The commit message in Git {{{
augroup filetype_edit_commitmessage
    autocmd!
    autocmd BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
augroup END
" }}}

" Mappings and abbreviations {{{
iabbrev ehome Wolf@zv.cx
iabbrev ework Wolf@genomenon.com

" Prepend hiding search matches (until the next search) to redrawing the screen
nnoremap <silent> <C-L> :<C-U>nohlsearch<CR><C-L>

" Edit my ~/.vimrc in a new tab, source it
nnoremap <silent> <Leader>ev :tabnew $HOME/.vimrc<CR>
nnoremap <silent> <Leader>sv :source $HOME/.vimrc<CR>
if has('gui')
    nnoremap <silent> <Leader>eg :tabnew $MYGVIMRC<CR>
    nnoremap <silent> <Leader>sg :source $MYGVIMRC<CR>
endif

" Whitespace errors {{{
let g:show_whitespace_errors = 0
function! ToggleShowWhitespaceErrors()
    let g:show_whitespace_errors = !g:show_whitespace_errors
    if g:show_whitespace_errors
        :2match Error /\v\s+$/
    else
        :2match none
    endif
endfunction

nnoremap <silent> <Leader>sw :call ToggleShowWhitespaceErrors()<CR>
" }}}

" Toggle relative line numbers for easier motion math
nnoremap <silent> <Leader>rn :set relativenumber!<CR>
" Toggle list view
nnoremap <silent> <Leader>l :set list!<CR>
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+,eol:$

" Act naturally when lines wrap
nnoremap j gj
nnoremap k gk
" nnoremap ^ g^
" nnoremap 0 g0
" nnoremap $ g$
nnoremap gj j
nnoremap gk k
" nnoremap g^ ^
" nnoremap g$ $
" nnoremap g0 0

" Keep the visual selection after in|out-denting
vnoremap > >gv
vnoremap < <gv

" Double anything else applies to the whole line, why not v?
nnoremap vv V

" Convenient for copy/paste of shell commands from a script during demos.
" Maybe temporary
nnoremap Y 0y$

" }}}

" Modelines {{{
set modeline

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.  See: https://vim.fandom.com/wiki/Modeline_magic
function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set %sai :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no', &autoindent ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), "")
    call append(line("$"), l:modeline)
endfunction

nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" }}}

" Undo {{{
if has('persistent_undo')
    set undodir=~/.vim/undo/
    set undofile
endif

" }}}


" vim: set ts=4 sw=4 tw=78 et ai :
